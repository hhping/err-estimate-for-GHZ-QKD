`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    09:28:18 08/24/2011 
// Design Name: 
// Module Name:    
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module qadd 
#(
	//Parameterized values
	parameter Q = 23,
	parameter N = 32
)
( 
	  input          clk,
	  input          rst,
	  input          i_start,
    input  [N-1:0] addend,
    input  [N-1:0] adder,
    output [N-1:0] add_res,
    output         add_res_vld
);

reg [N-1:0] res;
reg         res_vld;

assign add_res = res;
assign add_res_vld = res_vld;

always @(posedge clk) begin
if(rst)begin
    res[N-1:0] <= {N{1'b0}};
    res_vld    <= 1'b0;
end else if(i_start) begin
    res_vld <= 1'b1;
    // both negative or both positive
    if(addend[N-1] == adder[N-1]) begin						//	Since they have the same sign, absolute magnitude increases
    	  res[N-2:0] = addend[N-2:0] + adder[N-2:0];	 
    	  res[N-1] = addend[N-1];		
    	  	     
    //	one of them is negative...
    end else if(addend[N-1] == 0 && adder[N-1] == 1) begin		//	suaddertract a-b
    	  if( addend[N-2:0] > adder[N-2:0] ) begin					//	if a is greater than b,
    	  	  res[N-2:0] = addend[N-2:0] - adder[N-2:0];			//		then just subtract b from a
    	  	  res[N-1] = 0;										//		and manually set the sign to positive
    	  end else begin												//	if a is less than b,
    	  	  res[N-2:0] = adder[N-2:0] - addend[N-2:0];			//		we'll actually subtract a from b to avoid a 2's complement answer
    	  	  if (res[N-2:0] == 0)
    	  		    res[N-1] = 0;										//		I don't like negative zero....
    	  	  else
    	  		    res[N-1] = 1;										//		and manually set the sign to negative
    	  end  
    end else begin												//	subtract b-a (a negative, b positive)
    	  if( addend[N-2:0] > adder[N-2:0] ) begin					//	if a is greater than b,
    	  	  res[N-2:0] = addend[N-2:0] - adder[N-2:0];			//		we'll actually subtract b from a to avoid a 2's complement answer
    	  	  if (res[N-2:0] == 0)
    	  	  	res[N-1] = 0;										//		I don't like negative zero....
    	  	  else
    	  	  	res[N-1] = 1;										//		and manually set the sign to negative    	  	
    	  end else begin												//	if a is less than b,
    	  	  res[N-2:0] = adder[N-2:0] - addend[N-2:0];			//		then just subtract a from b
    	  	  res[N-1] = 0;										//		and manually set the sign to positive
    	  end
    end
end else begin
    res[N-1:0] <= res[N-1:0];//{N{1'b0}};
    res_vld    <= 1'b0;	
end end

endmodule
